{"version":3,"sources":["Pomodoro.js","serviceWorker.js","index.js"],"names":["interval","defaultState","breakLength","sessionLength","minutes","seconds","running","label","Pomodoro","state","handleReset","audio","document","getElementById","_this","setState","clearInterval","pause","currentTime","handleBreak","event","change","target","id","split","handleChange","_this$setState","_event$target$id$spli","_event$target$id$spli2","Object","slicedToArray","stateValue","defineProperty","_this$setState2","handleStartStop","setInterval","play","this","toString","padStart","react_default","a","createElement","className","onClick","name","src","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Pomodoro","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63953cbd.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n// defaultState is only created here for aesthetic purposes\nconst defaultState = {\n\tbreakLength: 5,\n\tsessionLength: 25,\n\tminutes: 25,\n\tseconds: 0,\n\trunning: false,\n\tlabel: 'Session'\n};\n\n// interval is created outside the class for proper handling\nlet interval;\n\nclass Pomodoro extends React.Component {\n\tstate = defaultState;\n\n\thandleReset = () => {\n\t\tconst audio = document.getElementById('beep');\n\t\tthis.setState(defaultState);\n\t\tclearInterval(interval);\n\t\taudio.pause();\n\t\taudio.currentTime = 0;\n\t};\n\n\thandleBreak = event => {\n\t\tconst change = event.target.id.split('-')[1];\n\t\tconst { breakLength } = this.state;\n\t\tif (change === 'increment' && breakLength !== 60)\n\t\t\tthis.setState({ breakLength: breakLength + 1 });\n\t\telse if (change === 'decrement' && breakLength !== 1)\n\t\t\tthis.setState({ breakLength: breakLength - 1 });\n\t};\n\n\thandleChange = event => {\n\t\tif (!this.state.running) {\n\t\t\tconst [id, change] = event.target.id.split('-');\n\t\t\tconst stateValue = this.state[id + 'Length'];\n\t\t\tif (change === 'decrement' && stateValue !== 1) {\n\t\t\t\tthis.setState({\n\t\t\t\t\t[id + 'Length']: stateValue - 1,\n\t\t\t\t\tminutes: stateValue - 1,\n\t\t\t\t\tseconds: 0\n\t\t\t\t});\n\t\t\t} else if (change === 'increment' && stateValue !== 60) {\n\t\t\t\tthis.setState({\n\t\t\t\t\t[id + 'Length']: stateValue + 1,\n\t\t\t\t\tminutes: stateValue + 1,\n\t\t\t\t\tseconds: 0\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\thandleStartStop = () => {\n\t\tif (this.state.running) {\n\t\t\tclearInterval(interval);\n\t\t\tthis.setState({ running: false });\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\trunning: true\n\t\t\t});\n\n\t\t\tinterval = setInterval(() => {\n\t\t\t\tconst minutes = this.state.minutes;\n\t\t\t\tconst seconds = this.state.seconds;\n\n\t\t\t\tif (minutes === 0 && seconds === 0) {\n\t\t\t\t\tdocument.getElementById('beep').play();\n\t\t\t\t\tif (this.state.label === 'Session') {\n\t\t\t\t\t\tthis.setState({ label: 'Break', minutes: this.state.breakLength });\n\t\t\t\t\t} else if (this.state.label === 'Break') {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tlabel: 'Session',\n\t\t\t\t\t\t\tminutes: this.state.sessionLength\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else if (!this.state.seconds) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tminutes: minutes - 1,\n\t\t\t\t\t\tseconds: 59\n\t\t\t\t\t});\n\t\t\t\t} else this.setState({ seconds: seconds - 1 });\n\t\t\t}, 1000);\n\t\t}\n\t};\n\n\trender() {\n\t\tconst minutes = this.state.minutes.toString().padStart(2, '0');\n\t\tconst seconds = this.state.seconds.toString().padStart(2, '0');\n\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<p>Pomodoro Clock</p>\n\t\t\t\t<div className='break'>\n\t\t\t\t\t<p id='break-label'>Break Length</p>\n\t\t\t\t\t<button id='break-decrement' onClick={this.handleBreak}>\n\t\t\t\t\t\t<ion-icon name='arrow-round-down' />\n\t\t\t\t\t</button>\n\t\t\t\t\t<span id='break-length'>{this.state.breakLength}</span>\n\t\t\t\t\t<button id='break-increment' onClick={this.handleBreak}>\n\t\t\t\t\t\t<ion-icon name='arrow-round-up' />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className='session'>\n\t\t\t\t\t<p id='session-label'>Session Length</p>\n\t\t\t\t\t<button id='session-decrement' onClick={this.handleChange}>\n\t\t\t\t\t\t<ion-icon name='arrow-round-down' />\n\t\t\t\t\t</button>\n\t\t\t\t\t<span id='session-length'>{this.state.sessionLength}</span>\n\t\t\t\t\t<button id='session-increment' onClick={this.handleChange}>\n\t\t\t\t\t\t<ion-icon name='arrow-round-up' />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className='rest'>\n\t\t\t\t\t<p id='timer-label'>{this.state.label}</p>\n\t\t\t\t\t<p id='time-left'>\n\t\t\t\t\t\t{minutes}:{seconds}\n\t\t\t\t\t</p>\n\t\t\t\t\t<button id='start_stop' onClick={this.handleStartStop}>\n\t\t\t\t\t\t<i>\n\t\t\t\t\t\t\t<ion-icon name='stopwatch' />\n\t\t\t\t\t\t</i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button id='reset' onClick={this.handleReset}>\n\t\t\t\t\t\t<i>\n\t\t\t\t\t\t\t<ion-icon name='refresh' />\n\t\t\t\t\t\t</i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<audio id='beep' src='https://goo.gl/65cBl1' />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Pomodoro;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Pomodoro from './Pomodoro';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Pomodoro />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}